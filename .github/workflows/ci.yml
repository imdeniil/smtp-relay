name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: '.'
          severity: warning
          ignore_paths: .git .github

  validate-compose:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose.full.yml
        run: docker compose -f configs/docker-compose.full.yml config > /dev/null

      - name: Validate docker-compose.smtp-only.yml
        run: docker compose -f configs/docker-compose.smtp-only.yml config > /dev/null

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Markdown Lint
        uses: actionshub/markdownlint@main
        continue-on-error: true

  check-secrets:
    name: Check for Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for passwords and secrets
        run: |
          if grep -r "password.*=.*['\"]" --include="*.sh" --include="*.yml" .; then
            echo "Found hardcoded passwords!"
            exit 1
          fi
          if grep -r "key.*=.*['\"]" --include="*.sh" --include="*.yml" . | grep -v "key.pem\|apikey"; then
            echo "Found hardcoded keys!"
            exit 1
          fi
          echo "No hardcoded secrets found"

  test-syntax:
    name: Test Bash Syntax
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check bash syntax
        run: |
          for file in *.sh; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              bash -n "$file"
            fi
          done

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          required_files=(
            "README.md"
            "LICENSE"
            "CHANGELOG.md"
            "CONTRIBUTING.md"
            ".gitignore"
            ".env.example"
            "manage.sh"
            "deploy.sh"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Missing required file: $file"
              exit 1
            fi
          done
          
          echo "All required files present"

      - name: Check documentation links
        run: |
          # Check for broken internal links in README.md
          if grep -o '\[.*\](.*\.md)' README.md | grep -v http | while read link; do
            file=$(echo "$link" | sed 's/.*(\(.*\))/\1/')
            if [ ! -f "$file" ]; then
              echo "Broken link in README.md: $file"
              exit 1
            fi
          done; then
            echo "All internal links in README.md are valid"
          fi
